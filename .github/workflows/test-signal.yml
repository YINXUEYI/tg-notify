name: Test ShortCandidate Signal

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë

jobs:
  test-signal:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      MAIL_TO: ${{ secrets.MAIL_TO }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Send test ShortCandidate signal to TG + Email
        run: |
          python - <<'PY'
          import os, time, ssl, smtplib, requests, json
          from email.mime.text import MIMEText
          from email.header import Header

          # --- Telegram ---
          TG_TOKEN = os.environ.get("TELEGRAM_TOKEN")
          TG_CHAT = os.environ.get("TELEGRAM_CHAT_ID")
          tg_url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
          text = f"üì¢ Test ShortCandidate Signal\nTime: {time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())}"
          r = requests.post(tg_url, data={"chat_id": TG_CHAT, "text": text}, timeout=20)
          r.raise_for_status()
          print("Telegram Ê∂àÊÅØÂèëÈÄÅÊàêÂäü ‚úÖ")

          # --- Email ---
          host = os.environ.get("SMTP_HOST")
          port = int(os.environ.get("SMTP_PORT", "465"))
          user = os.environ.get("SMTP_USER")
          pwd = os.environ.get("SMTP_PASS")
          to = os.environ.get("MAIL_TO")

          if host and user and pwd and to:
              msg = MIMEText(text, "plain", "utf-8")
              msg["Subject"] = Header("üìß Test ShortCandidate Signal", "utf-8")
              msg["From"] = user
              msg["To"] = to

              ctx = ssl.create_default_context()
              with smtplib.SMTP_SSL(host, port, context=ctx, timeout=20) as smtp:
                  smtp.login(user, pwd)
                  smtp.sendmail(user, [to], msg.as_string())
              print("Email ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü ‚úÖ")
          else:
              print("Email Êú™ÂèëÈÄÅ ‚ö†Ô∏èÔºåËØ∑Ê£ÄÊü• SMTP_* Êàñ MAIL_TO secrets ÊòØÂê¶ÈÖçÁΩÆÊ≠£Á°Æ„ÄÇ")
          PY
